version: '3'
networks:
  gs-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
volumes:
  rabbitmq:
    driver: local
  redis:
    driver: local
  postgres:
    driver: local
services:

  postgres:
    container_name: gs-postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    networks:
      - gs-network

  rabbitmq:
    container_name: gs-rabbitmq
    image: "rabbitmq:3.6.9-management"
    environment:
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_DEFAULT_USER=gs
      - RABBITMQ_DEFAULT_PASS=gs
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - "rabbitmq:/var/lib/rabbitmq"
    networks:
      - gs-network

  redis:
    container_name: gs-redis
    image: 'bitnami/redis:5.0'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    volumes:
      - "redis:/bitnami/redis/data"
    networks:
      - gs-network

  web-api:
    container_name: gs-web-api
    image: ${DOCKER_LOGIN:-bpmonline}/gs-web-api:${DOCKER_TAG:-2.0.2}
    environment:
      - RequestTimeOut=${GS_REQUEST_TIMEOUT:-600000}
      - elasticLogin=${GS_ES_LOGIN}
      - elasticPassword=${GS_ES_PASSWORD}
      - elasticSearchUrl=${GS_ES_URL}
      - publicElasticSearchUrl=${GS_ES_URL}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__DbType=${GS_COMMON_DB_TYPE:-postgresql}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - connectionStrings__redis=${GS_REDIS_CONNECTION_STRING:-redis://gs-redis:6379?db=1&maxReadPoolSize=25&maxWritePoolSize=25}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    ports:
      - "${WEB_API_PORT}:80"
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  web-indexing-service:
    container_name: gs-web-indexing-service
    image: ${DOCKER_LOGIN:-bpmonline}/gs-web-indexing-service:${DOCKER_TAG:-2.0.2}
    environment:
      - RabbitConfiguration__RabbitMQUri=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitConfiguration__ConnectAttempts=${RABBITMQ_CONNECT_ATTEMPTS:-5}
      - RabbitConfiguration__ReconnectInterval=${RABBITMQ_RECONNECT_INTERVAL:-00:00:05}
      - RabbitConfiguration__NetworkRecoveryInterval=${RABBITMQ_NETWORK_RECOVERY_INTERVAL:-00:00:05}
      - IndexEntityPublisherConfiguration__QueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_TASK:-gs-single-task}
      - QueriedIndexEntityPublisherConfiguration__QueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_QUERIED_TASK_INBOX:-gs-single-queried-task-inbox}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    ports:
      - "${WEB_INDEXING_SERVICE_PORT}:80"
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  scheduler:
    container_name: gs-scheduler
    image: ${DOCKER_LOGIN:-bpmonline}/gs-scheduler:${DOCKER_TAG:-2.0.2}
    environment:
      - DbType=${GS_COMMON_DB_TYPE:-postgresql}
      - DbDialectProvider=${GS_COMMON_DB_DIALECT_PROVIDER:-ServiceStack.OrmLite.PostgreSqlDialect, ServiceStack.OrmLite.PostgreSQL, Culture=neutral, PublicKeyToken=null}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_INBOX:-gs-inbox}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_OUTBOX:-gs-outbox}
      - RabbitMQSettings__FillQueueInterval=${GS_DB_FILL_QUEUE_INTERVAL:-30000}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker:
    container_name: gs-worker-01
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker:${DOCKER_TAG:-2.0.2}
    environment:
      - elasticLogin=${GS_ES_LOGIN}
      - elasticPassword=${GS_ES_PASSWORD}
      - RequestTimeOut=${GS_REQUEST_TIMEOUT:-600000}
      - OnSiteClientSettings__ElasticSearchUrl=${GS_ES_URL}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_INBOX:-gs-inbox}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_OUTBOX:-gs-outbox}
      - RabbitMQSettings__IncrementDays=${GS_DB_INCREMENT_DAYS:-500}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker-queried-single-task:
    container_name: gs-worker-queried-single-task
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker-queried-single-task:${DOCKER_TAG:-2.0.2}
    environment:
      - elasticLogin=${GS_ES_LOGIN}
      - elasticPassword=${GS_ES_PASSWORD}
      - OnSiteClientSettings__ElasticSearchUrl=${GS_ES_URL}
      - RabbitConfiguration__RabbitMQUri=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitConfiguration__ConnectAttempts=${RABBITMQ_CONNECT_ATTEMPTS:-5}
      - RabbitConfiguration__ReconnectInterval=${RABBITMQ_RECONNECT_INTERVAL:-00:00:05}
      - RabbitConfiguration__NetworkRecoveryInterval=${RABBITMQ_NETWORK_RECOVERY_INTERVAL:-00:00:05}
      - IndexEntityPublisherConfiguration__QueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_TASK:-gs-single-task}
      - RabbitConsumerConfiguration__QueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_QUERIED_TASK_INBOX:-gs-single-queried-task-inbox}
      - ElasticScrollConfiguration__ScrollBatchSize=${ES_SCROLL_BATCH_SIZE:-1000}
      - ElasticScrollConfiguration__ScrollTimeout=${ES_SCROLL_TIMEOUT:-60000}
      - Log4NetPath=l${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker-replay:
    container_name: gs-worker-replay
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker-replay:${DOCKER_TAG:-2.0.2}
    environment:
      - DbDialectProvider=${GS_COMMON_DB_DIALECT_PROVIDER:-ServiceStack.OrmLite.PostgreSqlDialect, ServiceStack.OrmLite.PostgreSQL, Culture=neutral, PublicKeyToken=null}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_INBOX:-gs-inbox}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_OUTBOX:-gs-outbox}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker-single:
    container_name: gs-worker-single
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker-single:${DOCKER_TAG:-2.0.2}
    environment:
      - elasticLogin=${GS_ES_LOGIN}
      - elasticPassword=${GS_ES_PASSWORD}
      - RequestTimeOut=${GS_REQUEST_TIMEOUT:-600000}
      - OnSiteClientSettings__ElasticSearchUrl=${GS_ES_URL}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_INBOX:-gs-single-inbox}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_OUTBOX:-gs-single-outbox}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker-single-replay:
    container_name: gs-worker-single-replay
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker-single-replay:${DOCKER_TAG:-2.0.2}
    environment:
      - DbDialectProvider=${GS_COMMON_DB_DIALECT_PROVIDER:-ServiceStack.OrmLite.PostgreSqlDialect, ServiceStack.OrmLite.PostgreSQL, Culture=neutral, PublicKeyToken=null}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_INBOX:-gs-single-inbox}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_OUTBOX:-gs-single-outbox}
      - RabbitMQSettings__IncrementDays=${GS_DB_INCREMENT_DAYS:-500}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq

  worker-single-task:
    container_name: gs-worker-single-task
    image: ${DOCKER_LOGIN:-bpmonline}/gs-worker-single-task:${DOCKER_TAG:-2.0.2}
    environment:
      - DbType=${GS_COMMON_DB_TYPE:-postgresql}
      - DbDialectProvider=${GS_COMMON_DB_DIALECT_PROVIDER:-ServiceStack.OrmLite.PostgreSqlDialect, ServiceStack.OrmLite.PostgreSQL, Culture=neutral, PublicKeyToken=null}
      - connectionStrings__db=${GS_DB_CONNECTION_STRING:-User ID=postgres;Password=postgres;Server=gs-postgres;Port=5432;Database=postgres;Pooling=true;MinPoolSize=0;MaxPoolSize=200}
      - connectionStrings__RabbitMQ=${GS_RABBITMQ_AMQP:-amqp://gs:gs@gs-rabbitmq:5672}
      - connectionStrings__redis=${GS_REDIS_CONNECTION_STRING:-redis://gs-redis:6379?db=1&maxReadPoolSize=25&maxWritePoolSize=25}
      - RabbitMQSettings__RabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_TASK:-gs-single-task}
      - RabbitMQSettings__ReplyRabbitQueueName=${GS_RABBITMQ_QUEUE_NAME_SINGLE_INBOX:-gs-single-inbox}
      - Log4NetPath=${LOG4NET_CONFIG_FILE:-log4net.production.config}
    networks:
      - gs-network
    depends_on:
      - redis
      - postgres
      - rabbitmq
